<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on OpenWhisk and friends</title><link>https://openwhisk.blog/post/</link><description>Recent content in Posts on OpenWhisk and friends</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright [Michele Sciabarrà](https://www.linkedin.com/in/msciab) | Book [Learning Apache OpenWhisk](https://www.oreilly.com/library/view/learning-apache-openwhisk/9781492046158/) published by [O'Reilly](https://www.oreilly.com/)</copyright><lastBuildDate>Tue, 06 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://openwhisk.blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Nimbella and Netflify Integration</title><link>https://openwhisk.blog/post/tech/fullstack-serverless/</link><pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/tech/fullstack-serverless/</guid><description>The serverless approach is evolving towards an ecosystem of interconnected services in the cloud, where each service does its part at best and cooperate smoothly with other services.
Nimbella is very strong in providing Server Side functions. One of its innovations is the ability to code in the &amp;ldquo;serveless&amp;rdquo; but developing maintaining a state. It is generally a good solution for all your API and geric backend needs.
Nimbella also offers an integrated solution for deploying front-end code, acting as a single shop to deliver a full serverless applications.</description></item><item><title>Apache OpenWhisk is a truly portable Serverless Platform</title><link>https://openwhisk.blog/post/advocate/openwhisk-portable-serverless/</link><pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/openwhisk-portable-serverless/</guid><description>TL;DR Apache OpenWhisk is a truly portable and multiplatform Serverless engine and it is available now on all the major clouds from multiple commercial vendors. Here is a Chess Engine running on:
Adobe I/O IBM Cloud Naver Nimbella And see below for instructions how to run it also locally and in any Kubernetes cluster, for example AWS EKS&amp;hellip;
OpenWhisk? Apache OpenWhisk is a Serverless Cloud Platform, developed as an open source project at the Apache Software Foundations.</description></item><item><title>The Middle Age of the cloud</title><link>https://openwhisk.blog/post/advocate/the-middle-age-of-cloud/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/the-middle-age-of-cloud/</guid><description>When I say I believe we are in the Middle Ages of the Cloud, people questions what I mean, and I have to tell a story.
Around the year 2000, Java was considered &amp;ldquo;the&amp;rdquo; language of the Internet, with Java Enterprise, offered as the final solution to all problems of Internet development.
The promise was: write Enterprise Java Beans and use Application Server Java EE and you have solved all your problems.</description></item><item><title>Picking the right level of abstraction</title><link>https://openwhisk.blog/post/advocate/right-abstraction/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/right-abstraction/</guid><description>The problem of the &amp;ldquo;right level of abstraction&amp;rdquo; is long-standing in computer science. When I studied &amp;ldquo;programming languages&amp;rdquo; at university, the textbook defined computer science as &amp;ldquo;the art of building hierarchies of abstract machines&amp;rdquo;.
At first, I didn&amp;rsquo;t understand, then I realized it&amp;rsquo;s true: progress in Information Technology consists mainly in using existing &amp;ldquo;machines&amp;rdquo; to build on top other, simpler and easier to use, computing machines.
For example, starting with the processor, you build on top of it a system programming language, like C or C ++.</description></item><item><title>Why Microservices?</title><link>https://openwhisk.blog/post/advocate/why-microservices/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/why-microservices/</guid><description>Why should you bother writing applications using micro-services? Is it really needed? What is wrong with the way they are written now? And, most importantly, how to do it?
Web applications are, in a way or another, collections of &amp;ldquo;services&amp;rdquo; accessible in HTTP(S). When your application runs on a single server it is easier to put everything together in one monolithic program. Most web frameworks actually are designed with this assumption in mind: one single point of control where you add your code for the services and the framework does the rest.</description></item><item><title>Simple, then Complex, then Just Right</title><link>https://openwhisk.blog/post/advocate/simple-complex-right/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/simple-complex-right/</guid><description>The development pattern of new technologies is usually the one I found describe for the first time in the Java white paper. They start with a new useful technical idea. Then it is inflated by adding everything under the sun, making it so complex that is impossible to use. Finally, it is scaled down, taking only what is needed and getting rid of the useless complexity.
For example, let&amp;rsquo;s consider Java development.</description></item><item><title>The secret behind OpenWhisk scalability</title><link>https://openwhisk.blog/post/tutorial/01-intro/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/tutorial/01-intro/</guid><description>How is it possible for OpenWhisk to scale automatically and distribute workload in the cloud starting from simple functions, written in different programming languages?
The secret lies in its internal architecture. For the end-user, all it takes is to send his code as a function to the &amp;ldquo;cloud&amp;rdquo;. A lot of things then happen internally. The function is assembled into an executor, called runtime. There are runtimes for Javascript, Python, Java, Go, and many other programming languages.</description></item><item><title>Comparing Kubernetes and OpenWhisk</title><link>https://openwhisk.blog/post/advocate/what-is-kubernetes/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/what-is-kubernetes/</guid><description>&amp;ldquo;But I can&amp;rsquo;t understand, isn&amp;rsquo;t Kubernetes a platform for microservices?&amp;rdquo;
&amp;ldquo;No, Kubernetes at best is a container orchestrator. There is a huge difference.&amp;rdquo;
&amp;ldquo;What is the difference, sorry?&amp;rdquo;
&amp;ldquo;Think about the difference between going to a shop and buying a working radio, or ordering an electronic kit to do build the radio by yourself .&amp;rdquo;
&amp;ldquo;But Kubernetes also have Knative &amp;hellip;.&amp;rdquo;
&amp;ldquo;Which is not a F.A.A.S. but a serverless workload manager.</description></item><item><title>OpenWhisk is like a CMS for the cloud</title><link>https://openwhisk.blog/post/advocate/openwhisk-is-a-cloud-cms/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/openwhisk-is-a-cloud-cms/</guid><description>In 2001 I started supporting a product that already had all the features of an advanced CMS back then.
It was the period when websites were &amp;ldquo;hand-written&amp;rdquo;. People were creating web pages using an editor, frequently just a text editor, and uploaded via FTP in a &amp;ldquo;web space&amp;rdquo; offered by ISP. Bookstores had books on HTML everywhere.
At that time I was already working with a tool that worked like a modern CMS: it defined a content model, applied rendering logic, offered a tool to incrementally publishing.</description></item><item><title>The quest for the next big thing</title><link>https://openwhisk.blog/post/advocate/we-need-easy-solutions/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/we-need-easy-solutions/</guid><description>Where to invest in IT innovations today? AI looks promising, but in the meanwhile, the cloud is booming. Why? Many reasons: from cost savings to the fact that the next-generation applications can only be &amp;ldquo;cloud-native&amp;rdquo;. Even the smallest business may need tens of servers, and using the cloud is going to be the only practical option.
So, where is the pain when it comes to moving applications to the cloud? The pain is in being cloud-native.</description></item><item><title>Easy OpenWhisk versus hard Kubernetes</title><link>https://openwhisk.blog/post/advocate/easy-vs-hard/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/easy-vs-hard/</guid><description>Practically in every programming environment a dualism arises between the &amp;ldquo;difficult&amp;rdquo; approach, for real tough and the &amp;ldquo;easy&amp;rdquo; one, for mere mortals.
Usually it starts with the difficult approach, usally the only one available. Then the easy one appears, which is initially derided. Slowly the &amp;ldquo;easy&amp;rdquo; approach prevails and takes 80% of the market.
I saw this dualism appearing for the first time in home computers, with those who developed in Assembler and those in Basic.</description></item><item><title>The zen of OpenWhisk</title><link>https://openwhisk.blog/post/advocate/zen-and-openwhisk/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/advocate/zen-and-openwhisk/</guid><description>&amp;ldquo;Zen Master, why is cloud programming so difficult?&amp;rdquo;
&amp;ldquo;The cloud isn&amp;rsquo;t difficult to program, the cloud simply is.&amp;rdquo; &amp;ldquo;Master, and what is the cloud?&amp;rdquo;
&amp;ldquo;Don&amp;rsquo;t ask yourself what the cloud is, just ask yourself what you want from the cloud.&amp;rdquo;
&amp;ldquo;I just want it runs my code.&amp;rdquo;
&amp;ldquo;And why don&amp;rsquo;t you just put your code in the cloud?&amp;rdquo;
&amp;ldquo;Because I cannot just put my code in the cloud!&amp;rdquo;
&amp;ldquo;Why not?&amp;rdquo;</description></item><item><title/><link>https://openwhisk.blog/post/tech/fullstack-serverless/old/010/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/tech/fullstack-serverless/old/010/</guid><description>nim project create whisk-fullstack cd whisk-fullstack/ npx degit sveltejs/template web cd web npm install cd ..</description></item><item><title/><link>https://openwhisk.blog/post/tech/fullstack-serverless/old/011/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/tech/fullstack-serverless/old/011/</guid><description>git init echo &amp;ldquo;node_modules/&amp;rdquo; &amp;gt;.gitignore git add .gitignore web packages git commit -m &amp;ldquo;first commit&amp;rdquo; git branch -M master git remote add origin $GHSC/openwhisk-blog/whisk-fullstack.git git push -u origin master</description></item><item><title/><link>https://openwhisk.blog/post/tech/fullstack-serverless/old/030/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openwhisk.blog/post/tech/fullstack-serverless/old/030/</guid><description/></item></channel></rss>